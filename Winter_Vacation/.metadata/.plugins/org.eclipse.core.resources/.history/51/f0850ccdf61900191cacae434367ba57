package emirim.handler;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JLabel;

import emirim.constant.KakaoConstant;
import emirim.view.KakaoView;

public class KakaoHandler extends KeyAdapter {
	private JLabel lbl;
	private KakaoView view;
	private int[] obstacleX, obstacleY, treasureX, treasureY;
	private int[] obstartX, obendX, obstartY, obendY;
	private int[] trstartX, trendX, trstartY, trendY;
	private JLabel lblScore;
	private boolean prev_status_hit = false;
	
	public KakaoHandler(KakaoView view) {
		super();
		this.view = view;
		this.lbl = view.getLbl();				//캐릭터 라벨
		this.lblScore = view.getLblScore();		//점수 라벨
		this.obstacleX = view.getObstacleX();	//장애물 X 좌표들 저장된 배열
		this.obstacleY = view.getObstacleY();	//장애물 Y 좌표들 저장된 배열
		this.treasureX = view.getTreasureX();	//보물 X 좌표들 저장된 배열
		this.treasureY = view.getTreasureY();	//보물 Y 좌표들 저장된 배열
		this.obstartX = new int[obstacleX.length];		//장애물이 시작되는 X 좌표 3개를 저장하는 배열
		this.obendX = new int[obstacleX.length];		//장애물이 끝나는 X 좌표 3개를 저장하는 배열
		this.obstartY = new int[obstacleX.length];		//장애물이 시작하는 Y 좌표 3개를 저장하는 배열
		this.obendY = new int[obstacleX.length];		//장애물이 끝나는 Y 좌표 3개를 저장하는 배열
		for (int i = 0; i < obendX.length; i++) {
			obstartX[i] = obstacleX[i] - KakaoConstant.RB_JLABEL_WIDTH;
			obendX[i] = obstacleX[i] + KakaoConstant.OT_JLABEL_WIDTH;
			obstartY[i] = obstacleY[i] - KakaoConstant.RB_JLABEL_HEIGHT;
			obendY[i] = obstacleY[i] + KakaoConstant.OT_JLABEL_HEIGHT;
		}
//		캐릭터와 보물이 부딪히는 지점의 시작점 끝점
		this.trstartX = new int[treasureX.length];
		this.trendX = new int[treasureX.length];
		this.trstartY = new int[treasureX.length];
		this.trendY = new int[treasureX.length];
		for (int i = 0; i < trendX.length; i++) {
			trstartX[i] = treasureX[i] - KakaoConstant.RB_JLABEL_WIDTH;
			trendX[i] = treasureX[i] + KakaoConstant.OT_JLABEL_WIDTH;
			trstartY[i] = treasureY[i] - KakaoConstant.RB_JLABEL_HEIGHT;
			trendY[i] = treasureY[i] + KakaoConstant.OT_JLABEL_HEIGHT;
		}
	}

	@Override
	public void keyPressed(KeyEvent e) {
		int x = lbl.getX();
		int y = lbl.getY();
		
//		장애물의 위치를 확인해서 점수 감소
		for (int i = 0; i < obendX.length; i++) {
			if (x > obstartX[i] && x < obendX[i]) {
				if (y > obstartY[i] && y < obendY[i]) {
					if (!prev_status_hit) {
						view.setScore(view.getScore()-10);
						lblScore.setText("점수: " + view.getScore());
//						new ObstacleAudio();
					}
//					object_hit = true;
				}
			}
		}
	}
}
